import pandas as pd
import numpy as np


def analyze_data_issues():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv("parsed_PDOM1844027118_v2.csv")
    print(f"=== –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• ===")
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")

    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    print(f"–ß–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {len(numeric_cols)}")

    print(f"\n–ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(numeric_cols)}")

    # 1. –ê–Ω–∞–ª–∏–∑ NaN –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\n=== NaN –ó–ù–ê–ß–ï–ù–ò–Ø ===")
    nan_found = False
    for col in numeric_cols:
        nan_count = df[col].isnull().sum()
        if nan_count > 0:
            nan_percent = (nan_count / len(df)) * 100
            print(f"  {col}: {nan_count} NaN ({nan_percent:.2f}%)")
            nan_found = True

    if not nan_found:
        print("  ‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö")

    # 2. –ê–Ω–∞–ª–∏–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\n=== –ë–ï–°–ö–û–ù–ï–ß–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ===")
    inf_found = False
    for col in numeric_cols:
        inf_count = np.isinf(df[col]).sum()
        if inf_count > 0:
            inf_percent = (inf_count / len(df)) * 100
            print(f"  {col}: {inf_count} inf ({inf_percent:.2f}%)")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã inf –∑–Ω–∞—á–µ–Ω–∏–π
            inf_mask = np.isinf(df[col])
            if inf_mask.any():
                inf_samples = df[inf_mask][col].head(3)
                print(f"    –ü—Ä–∏–º–µ—Ä—ã: {list(inf_samples)}")
            inf_found = True

    if not inf_found:
        print("  ‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SPR (Stack-to-Pot Ratio)
    if "SPR" in df.columns:
        print(f"\n=== –ê–ù–ê–õ–ò–ó SPR (Stack-to-Pot Ratio) ===")
        spr_stats = df["SPR"].describe()
        print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SPR:")
        print(f"    –°—Ä–µ–¥–Ω–µ–µ: {spr_stats['mean']:.3f}")
        print(f"    –ú–µ–¥–∏–∞–Ω–∞: {spr_stats['50%']:.3f}")
        print(f"    –ú–∞–∫—Å–∏–º—É–º: {spr_stats['max']:.3f}")
        print(f"    –ú–∏–Ω–∏–º—É–º: {spr_stats['min']:.3f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        very_high_spr = (df["SPR"] > 1000).sum()
        very_low_spr = (df["SPR"] < 0).sum()
        inf_spr = np.isinf(df["SPR"]).sum()

        print(f"    SPR > 1000: {very_high_spr} –∑–∞–ø–∏—Å–µ–π")
        print(f"    SPR < 0: {very_low_spr} –∑–∞–ø–∏—Å–µ–π")
        print(f"    SPR = inf: {inf_spr} –∑–∞–ø–∏—Å–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏—á–∏–Ω—É inf - –Ω—É–ª–µ–≤—ã–µ pot
        if "Pot" in df.columns:
            zero_pot = (df["Pot"] == 0).sum()
            very_small_pot = (df["Pot"] > 0) & (df["Pot"] < 0.01)
            very_small_pot_count = very_small_pot.sum()

            print(
                f"    Pot = 0: {zero_pot} –∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å inf –ø—Ä–∏ SPR = Stack/Pot)"
            )
            print(
                f"    Pot < 0.01: {very_small_pot_count} –∑–∞–ø–∏—Å–µ–π (–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ SPR)"
            )

            if zero_pot > 0:
                print(f"    ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: Pot = 0 –≤—ã–∑—ã–≤–∞–µ—Ç inf –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ SPR!")

    # 4. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å —à–æ—É–¥–∞—É–Ω–æ–º
    print(f"\n=== –î–ê–ù–ù–´–ï –° –®–û–£–î–ê–£–ù–û–ú ===")
    showdown_mask = (df["Showdown_1"].notna()) & (df["Showdown_2"].notna())
    df_showdown = df[showdown_mask]
    print(
        f"  –ó–∞–ø–∏—Å–µ–π —Å —à–æ—É–¥–∞—É–Ω–æ–º: {len(df_showdown)} –∏–∑ {len(df)} ({len(df_showdown)/len(df)*100:.1f}%)"
    )

    if len(df_showdown) > 0:
        print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Å —à–æ—É–¥–∞—É–Ω–æ–º:")
        problems_in_showdown = False

        for col in numeric_cols:
            if col in df_showdown.columns:
                nan_count = df_showdown[col].isnull().sum()
                inf_count = np.isinf(df_showdown[col]).sum()

                if nan_count > 0 or inf_count > 0:
                    print(f"    {col}: {nan_count} NaN, {inf_count} inf")
                    problems_in_showdown = True

        if not problems_in_showdown:
            print(f"    ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Å —à–æ—É–¥–∞—É–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\n=== –ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–û–õ–û–ù–ö–ò ===")

    problem_columns = []

    for col in numeric_cols:
        issues = []

        # NaN
        nan_count = df[col].isnull().sum()
        if nan_count > 0:
            issues.append(f"{nan_count} NaN")

        # Inf
        inf_count = np.isinf(df[col]).sum()
        if inf_count > 0:
            issues.append(f"{inf_count} inf")

        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if df[col].dtype in ["float64", "int64"]:
            q99 = df[col].quantile(0.99)
            q01 = df[col].quantile(0.01)
            extreme_high = (
                df[col] > q99 * 1000
            ).sum()  # –ó–Ω–∞—á–µ–Ω–∏—è –≤ 1000 —Ä–∞–∑ –±–æ–ª—å—à–µ 99-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è
            extreme_low = (
                df[col] < q01 / 1000
            ).sum()  # –ó–Ω–∞—á–µ–Ω–∏—è –≤ 1000 —Ä–∞–∑ –º–µ–Ω—å—à–µ 1-–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è

            if extreme_high > 0:
                issues.append(f"{extreme_high} —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏—Ö")
            if extreme_low > 0:
                issues.append(f"{extreme_low} —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö")

        if issues:
            problem_columns.append((col, issues))

    if problem_columns:
        print(f"  –ù–∞–π–¥–µ–Ω–æ {len(problem_columns)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        for col, issues in problem_columns:
            print(f"    {col}: {', '.join(issues)}")
    else:
        print(f"  ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    print(f"\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")

    if inf_found:
        print(f"  üîß –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã - –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        print(f"     –í–∞—Ä–∏–∞–Ω—Ç—ã: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ NaN, –∑–∞—Ç–µ–º –Ω–∞ –º–µ–¥–∏–∞–Ω—É/—Å—Ä–µ–¥–Ω–µ–µ")

    if nan_found:
        print(f"  üîß NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã - –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        print(f"     –í–∞—Ä–∏–∞–Ω—Ç—ã: –º–µ–¥–∏–∞–Ω–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö, —Ä–µ–∂–∏–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö")

    if "SPR" in df.columns and (
        np.isinf(df["SPR"]).sum() > 0 or (df["Pot"] == 0).sum() > 0
    ):
        print(f"  üîß SPR —Å–æ–¥–µ—Ä–∂–∏—Ç inf –∏–∑-–∑–∞ Pot=0 - –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        print(f"     –í–∞—Ä–∏–∞–Ω—Ç: SPR = min(Stack/max(Pot, 0.01), max_reasonable_spr)")

    print(f"\n=== –í–õ–ò–Ø–ù–ò–ï –ù–ê –ú–û–î–ï–õ–¨ ===")
    print(f"  ‚Ä¢ NaN/inf –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö ‚Üí –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (StandardScaler)")
    print(f"  ‚Ä¢ inf –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–µ—Å–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    print(f"  ‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞")
    print(f"  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï –∏—Å–∫–∞–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å —Ä–∞–∑—É–º–Ω–æ:")
    print(f"    - inf ‚Üí –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–π –º–∞–∫—Å–∏–º—É–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å)")
    print(f"    - NaN ‚Üí –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –º–µ–¥–∏–∞–Ω—É (—Ä–æ–±–∞—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)")
    print(f"    - SPR = inf ‚Üí –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑—É–º–Ω—ã–º –º–∞–∫—Å–∏–º—É–º–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100)")


if __name__ == "__main__":
    analyze_data_issues()
